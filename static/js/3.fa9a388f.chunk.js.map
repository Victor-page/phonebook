{"version":3,"sources":["../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/Form/Form.module.css","components/ContactList/ContactItem/ContactItem.module.css","components/Form/Form.js","redux/contacts/contacts-selectors.js","components/Filter/Filter.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","views/ContactsView/ContactsView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js"],"names":["seed","module","exports","nextValue","_seed_","counter","previousSeconds","generate","require","clusterWorkerId","str","seconds","Math","floor","Date","now","alphabet","random","format","number","done","loopCounter","get","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","push","mask","log","length","LN2","step","id","RegExp","replace","test","Form","useState","name","setName","setNumber","useAddContactMutation","addContact","isLoading","contacts","useFetchContactsQuery","data","nameInputId","numberInputId","handleChange","currentTarget","value","onSubmit","event","preventDefault","trim","alert","enteredName","enteredNumber","concurrence","find","className","classes","form","htmlFor","type","pattern","title","required","onChange","disabled","getFilter","state","filter","Filter","filterInputId","useSelector","contactsSelectors","dispatch","useDispatch","filterValue","target","contactsActions","changeFilter","ContactItem","useDeleteContactMutation","deleteContact","isDeleting","contact","onClick","ContactList","isLoadingForTheFirstTime","error","visibleContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","message","map","ContactsView","_slicedToArray","arr","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","err","unsupportedIterableToArray","TypeError","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","splice","shuffle","characters","lookup","index","build","isValid","seedValue","worker","workerId","newCharacters"],"mappings":"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","file":"static/js/3.fa9a388f.chunk.js","sourcesContent":["'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__Rio11\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactItem_contact__pVjRq\"};","import { useState } from 'react';\r\n// import {\r\n//   // useSelector,\r\n//   //  useDispatch\r\n// } from 'react-redux';\r\n// import {\r\n//   // contactsOperations,\r\n//   // contactsSelectors,\r\n// } from 'redux/contacts';\r\nimport { useAddContactMutation } from 'redux/contacts/contacts-slice';\r\nimport { generate } from 'shortid';\r\nimport classes from './Form.module.css';\r\nimport { useFetchContactsQuery } from 'redux/contacts/contacts-slice';\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  // const contacts = useSelector(contactsSelectors.getContacts);\r\n  // const dispatch = useDispatch();\r\n  const [addContact, { isLoading }] = useAddContactMutation();\r\n  const { data: contacts } = useFetchContactsQuery();\r\n\r\n  const nameInputId = generate();\r\n  const numberInputId = generate();\r\n\r\n  const handleChange = ({ currentTarget: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const findConcurrence = (enteredName, enteredNumber) =>\r\n    contacts.find(\r\n      ({ name, number }) => name === enteredName || number === enteredNumber\r\n    );\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (name.trim() === '' || number.trim() === '') {\r\n      return alert('The fields are mandatory.');\r\n    }\r\n\r\n    const concurrence = findConcurrence(name, number);\r\n    if (concurrence) {\r\n      return alert(concurrence.name + ' is already in contacts.');\r\n    }\r\n\r\n    // const addAction = contactsOperations.addContact({ name, number });\r\n    // dispatch(addAction);\r\n    addContact({ name, number });\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label htmlFor={numberInputId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={numberInputId}\r\n      />\r\n      <button type=\"submit\" disabled={isLoading}>\r\n        {isLoading ? 'Adding...' : 'Add Contact'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// export const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n\r\n// export const getIsLoadingContacts = (state) => state.contacts.loading;\r\n\r\n// export const getError = (state) => state.contacts.error;\r\n","import { generate } from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors } from 'redux/contacts';\r\nimport { contactsActions } from 'redux/contacts/contacts-reducer';\r\n\r\nconst Filter = () => {\r\n  const filterInputId = generate();\r\n\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const changeHandler = ({ target: { value: filterValue } }) =>\r\n    dispatch(contactsActions.changeFilter(filterValue));\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={filterInputId}>Find contacts by name</label>\r\n      <input value={value} onChange={changeHandler} id={filterInputId} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport { useDeleteContactMutation } from 'redux/contacts/contacts-slice';\r\nimport classes from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({\r\n  name,\r\n  number,\r\n  id,\r\n  // onDeleteContact\r\n}) => {\r\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n\r\n  return (\r\n    <li className={classes.contact}>\r\n      <p>\r\n        <span>{name}</span>: <span>{number}</span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => deleteContact(id)}\r\n          disabled={isDeleting}\r\n        >\r\n          {isDeleting ? 'Deleting...' : 'Delete'}\r\n        </button>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  // onDeleteContact: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","// import { useEffect } from 'react';\r\nimport {\r\n  useSelector,\r\n  // useDispatch\r\n} from 'react-redux';\r\nimport {\r\n  //  contactsOperations,\r\n  contactsSelectors,\r\n} from 'redux/contacts';\r\nimport ContactItem from './ContactItem';\r\nimport { useFetchContactsQuery } from 'redux/contacts/contacts-slice';\r\n\r\nconst getVisibleContacts = (contacts, filterValue) => {\r\n  const normalizedFilter = filterValue.toLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst ContactList = () => {\r\n  // const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  // const dispatch = useDispatch();\r\n  // const isLoadingContacts = useSelector(contactsSelectors.getIsLoadingContacts);\r\n\r\n  // const error = useSelector(contactsSelectors.getError);\r\n  const filterValue = useSelector(contactsSelectors.getFilter);\r\n\r\n  const {\r\n    data: contacts = [],\r\n    isLoading: isLoadingForTheFirstTime,\r\n    error,\r\n  } = useFetchContactsQuery();\r\n\r\n  const visibleContacts = getVisibleContacts(contacts, filterValue);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(contactsOperations.fetchContacts());\r\n  // }, [dispatch]);\r\n\r\n  // const deleteContactHandler = (id) =>\r\n  //   dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoadingForTheFirstTime && <h2>Loading...</h2>}\r\n      {error && !isLoadingForTheFirstTime && <h2>{error?.data?.message}</h2>}\r\n      {visibleContacts.length !== 0 && (\r\n        <ul>\r\n          {visibleContacts.map(({ id, name, number }) => (\r\n            <ContactItem\r\n              key={id}\r\n              name={name}\r\n              number={number}\r\n              id={id}\r\n              // onDeleteContact={() => deleteContact(id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import Form from 'components/Form';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <Form />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n"],"sourceRoot":""}
{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactItem/ContactItem.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/counter/counter-actions.js","redux/counter/counter-reducer.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsEndpoint","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","contact","name","includes","getIsLoadingContacts","loading","getError","error","Form","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","nameInputId","generate","numberInputId","handleChange","currentTarget","value","onSubmit","event","preventDefault","trim","alert","enteredName","enteredNumber","concurrence","find","addAction","post","then","data","console","log","catch","message","addContact","className","classes","form","htmlFor","type","pattern","title","required","onChange","id","Filter","filterInputId","filterValue","target","ContactItem","onDeleteContact","onClick","ContactList","isLoadingContacts","useEffect","get","deleteContactHandler","delete","deleteContact","map","App","increment","decrement","valueReducer","createReducer","prevState","payload","stepReducer","counterReducer","combineReducers","step","_","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","counter","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4c35135.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__Rio11\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactItem_contact__pVjRq\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest'\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess'\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest'\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess'\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://61b44d0559c6ac0017300fbe.mockapi.io';\r\nconst contactsEndpoint = '/contacts';\r\n\r\nexport const fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get(contactsEndpoint)\r\n    .then(({ data }) => {\r\n      dispatch(fetchContactsSuccess(data));\r\n    })\r\n    .catch(({ message }) => {\r\n      dispatch(fetchContactsError(message));\r\n    });\r\n};\r\n\r\nexport const addContact = (name, number) => (dispatch) => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(contactsEndpoint, contact)\r\n    .then(({ data }) => {\r\n      console.log(data);\r\n      dispatch(addContactSuccess(data));\r\n    })\r\n    .catch(({ message }) => {\r\n      dispatch(addContactError(message));\r\n    });\r\n};\r\n\r\nexport const deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`${contactsEndpoint}/${id}`)\r\n    .then(({ data }) => {\r\n      dispatch(deleteContactSuccess(data.id));\r\n    })\r\n    .catch(({ message }) => {\r\n      dispatch(deleteContactError(message));\r\n    });\r\n};\r\n","export const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nexport const getIsLoadingContacts = (state) => state.contacts.loading;\r\n\r\nexport const getError = (state) => state.contacts.error;\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from 'redux/contacts/contacts-operations';\r\nimport { generate } from 'shortid';\r\nimport { getContacts } from 'redux/contacts/contacts-selectors';\r\nimport classes from './Form.module.css';\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = generate();\r\n  const numberInputId = generate();\r\n\r\n  const handleChange = ({ currentTarget: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const findConcurrence = (enteredName, enteredNumber) =>\r\n    contacts.find(\r\n      ({ name, number }) => name === enteredName || number === enteredNumber\r\n    );\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (name.trim() === '' || number.trim() === '') {\r\n      return alert('The fields are mandatory.');\r\n    }\r\n\r\n    const concurrence = findConcurrence(name, number);\r\n    if (concurrence) {\r\n      return alert(concurrence.name + ' is already in contacts.');\r\n    }\r\n\r\n    const addAction = addContact(name, number);\r\n    dispatch(addAction);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label htmlFor={numberInputId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={numberInputId}\r\n      />\r\n      <button type=\"submit\">Add Contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { generate } from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter } from 'redux/contacts/contacts-actions';\r\nimport { getFilter } from 'redux/contacts/contacts-selectors';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const filterInputId = generate();\r\n\r\n  const changeHandler = ({ target: { value: filterValue } }) =>\r\n    dispatch(changeFilter(filterValue));\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={filterInputId}>Find contacts by name</label>\r\n      <input value={value} onChange={changeHandler} id={filterInputId} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport classes from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, onDeleteContact }) => (\r\n  <li className={classes.contact}>\r\n    <p>\r\n      <span>{name}</span>: <span>{number}</span>\r\n      <button type=\"button\" onClick={onDeleteContact}>\r\n        Delete\r\n      </button>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  deleteContact,\r\n  fetchContacts,\r\n} from 'redux/contacts/contacts-operations';\r\nimport ContactItem from './ContactItem';\r\nimport {\r\n  getVisibleContacts,\r\n  getIsLoadingContacts,\r\n  getError,\r\n} from 'redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const isLoadingContacts = useSelector(getIsLoadingContacts);\r\n\r\n  const error = useSelector(getError);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const deleteContactHandler = (id) => dispatch(deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoadingContacts && <h2>Loading...</h2>}\r\n      {error && !isLoadingContacts && <h2>{error}</h2>}\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={() => deleteContactHandler(id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import Form from 'components/Form';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n// import Counter from 'components/Counter';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>Phonebook</h1>\r\n    <Form />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n\r\n    <ContactList />\r\n\r\n    {/* <Counter /> */}\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const increment = createAction('counter/Increment');\r\nexport const decrement = createAction('counter/Decrement');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { increment, decrement } from './counter-actions';\r\n\r\nconst valueReducer = createReducer(0, {\r\n  [increment]: (prevState, { payload }) => prevState + payload,\r\n  [decrement]: (prevState, { payload }) => prevState - payload,\r\n});\r\n\r\nconst stepReducer = createReducer(15, {});\r\n\r\nconst counterReducer = combineReducers({\r\n  value: valueReducer,\r\n  step: stepReducer,\r\n});\r\n\r\nexport default counterReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  changeFilter,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (prevState, { payload }) => [payload, ...prevState],\r\n  [deleteContactSuccess]: (prevState, { payload }) =>\r\n    prevState.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n  [fetchContactsError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading, error });\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport counterReducer from './counter/counter-reducer';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const persistedStore = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.css';\r\nimport App from './App';\r\n// import ContactsContext from 'context/ContactsProvider';\r\n// import FilterContext from 'context/FilterProvider';\r\nimport store from 'redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ContactsContext>\r\n      <FilterContext> */}\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={<p>Loading...</p>} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n    {/* </FilterContext>\r\n    </ContactsContext> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}
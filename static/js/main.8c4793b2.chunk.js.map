{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactItem/ContactItem.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-slice.js","components/Form/Form.js","redux/contacts/contacts-reducer.js","components/Filter/Filter.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/counter/counter-actions.js","redux/counter/counter-reducer.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","contactsEndpoint","fetchContacts","createAsyncThunk","a","get","data","addContact","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","name","includes","getIsLoadingContacts","loading","getError","error","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","query","providesTags","mutation","url","method","invalidatesTags","body","useFetchContactsQuery","useDeleteContactMutation","useAddContactMutation","Form","useState","setName","number","setNumber","useSelector","contactsSelectors","isLoading","nameInputId","generate","numberInputId","handleChange","currentTarget","value","onSubmit","event","preventDefault","trim","alert","enteredName","enteredNumber","concurrence","find","className","classes","form","htmlFor","type","pattern","title","required","onChange","disabled","contactsSlice","createSlice","initialState","reducers","changeFilter","payload","extraReducers","fulfilled","pending","rejected","action","message","contactsActions","actions","Filter","dispatch","useDispatch","filterInputId","filterValue","target","ContactItem","isDeleting","onClick","ContactList","isLoadingForTheFirstTime","map","App","increment","createAction","decrement","valueReducer","createReducer","prevState","stepReducer","counterReducer","combineReducers","step","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","counter","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c4793b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__Rio11\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactItem_contact__pVjRq\"};","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import {\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n//   deleteContactRequest,\r\n//   deleteContactSuccess,\r\n//   deleteContactError,\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n// } from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://61b44d0559c6ac0017300fbe.mockapi.io';\r\nconst contactsEndpoint = '/contacts';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async () => {\r\n    const { data } = await axios.get(contactsEndpoint);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get(contactsEndpoint)\r\n//     .then(({ data }) => {\r\n//       dispatch(fetchContactsSuccess(data));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(fetchContactsError(message));\r\n//     });\r\n// };\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (contact) => {\r\n    const { data } = await axios.post(contactsEndpoint, contact);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const addContact = (name, number) => (dispatch) => {\r\n//   const contact = { name, number };\r\n\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post(contactsEndpoint, contact)\r\n//     .then(({ data }) => {\r\n//       dispatch(addContactSuccess(data));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(addContactError(message));\r\n//     });\r\n// };\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id) => {\r\n    const { data } = await axios.delete(`${contactsEndpoint}/${id}`);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n//   axios\r\n//     .delete(`${contactsEndpoint}/${id}`)\r\n//     .then(({ data }) => {\r\n//       dispatch(deleteContactSuccess(data.id));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(deleteContactError(message));\r\n//     });\r\n// };\r\n","export const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nexport const getIsLoadingContacts = (state) => state.contacts.loading;\r\n\r\nexport const getError = (state) => state.contacts.error;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61b44d0559c6ac0017300fbe.mockapi.io',\r\n  }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: (builder) => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: (id) => ({ url: `/contacts/${id}`, method: 'DELETE' }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: (contact) => ({ url: '/contacts', method: 'POST', body: contact }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n  useAddContactMutation,\r\n} = contactsApi;\r\n","import { useState } from 'react';\r\nimport {\r\n  useSelector,\r\n  //  useDispatch\r\n} from 'react-redux';\r\nimport {\r\n  // contactsOperations,\r\n  contactsSelectors,\r\n} from 'redux/contacts';\r\nimport { useAddContactMutation } from 'redux/contacts/contacts-slice';\r\nimport { generate } from 'shortid';\r\nimport classes from './Form.module.css';\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  // const dispatch = useDispatch();\r\n  const [addContact, { isLoading }] = useAddContactMutation();\r\n\r\n  const nameInputId = generate();\r\n  const numberInputId = generate();\r\n\r\n  const handleChange = ({ currentTarget: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const findConcurrence = (enteredName, enteredNumber) =>\r\n    contacts.find(\r\n      ({ name, number }) => name === enteredName || number === enteredNumber\r\n    );\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (name.trim() === '' || number.trim() === '') {\r\n      return alert('The fields are mandatory.');\r\n    }\r\n\r\n    const concurrence = findConcurrence(name, number);\r\n    if (concurrence) {\r\n      return alert(concurrence.name + ' is already in contacts.');\r\n    }\r\n\r\n    // const addAction = contactsOperations.addContact({ name, number });\r\n    // dispatch(addAction);\r\n    addContact({ name, number });\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label htmlFor={numberInputId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={numberInputId}\r\n      />\r\n      <button type=\"submit\" disabled={isLoading}>\r\n        {isLoading ? 'Adding...' : 'Add Contact'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import {\r\n  // createReducer,\r\n  // combineReducers,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport // changeFilter,\r\n// addContactRequest,\r\n// addContactSuccess,\r\n// addContactError,\r\n// deleteContactRequest,\r\n// deleteContactSuccess,\r\n// deleteContactError,\r\n// fetchContactsRequest,\r\n// fetchContactsSuccess,\r\n// fetchContactsError,\r\n'./contacts-actions';\r\n\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from './contacts-operations';\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: { items: [], loading: false, filter: '', error: null },\r\n  reducers: {\r\n    changeFilter(state, { payload }) {\r\n      state.filter = payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchContacts.fulfilled]: (state, { payload }) => ({\r\n      ...state,\r\n      items: payload,\r\n      loading: false,\r\n      error: null,\r\n    }),\r\n    [fetchContacts.pending]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n      error: null,\r\n    }),\r\n    [fetchContacts.rejected]: (state, action) => ({\r\n      ...state,\r\n      loading: false,\r\n      error: action.error.message,\r\n    }),\r\n\r\n    [addContact.fulfilled]: (state, { payload }) => ({\r\n      ...state,\r\n      items: [payload, ...state.items],\r\n      loading: false,\r\n      error: null,\r\n    }),\r\n    [addContact.pending]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n      error: null,\r\n    }),\r\n    [addContact.rejected]: (state, action) => ({\r\n      ...state,\r\n      loading: false,\r\n      error: action.error.message,\r\n    }),\r\n\r\n    [deleteContact.fulfilled]: (state, { payload }) => ({\r\n      ...state,\r\n      items: state.items.filter(({ id }) => id !== payload.id),\r\n      loading: false,\r\n      error: null,\r\n    }),\r\n    [deleteContact.pending]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n      error: null,\r\n    }),\r\n    [deleteContact.rejected]: (state, action) => ({\r\n      ...state,\r\n      loading: false,\r\n      error: action.error.message,\r\n    }),\r\n  },\r\n});\r\n\r\n// const items = createReducer([], {\r\n//   // [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n//   // [addContact.fulfilled]: (prevState, { payload }) => [payload, ...prevState],\r\n//   // [deleteContact.fulfilled]: (prevState, { payload }) =>\r\n//   //   prevState.filter(({ id }) => id !== payload.id),\r\n// });\r\n\r\n// const loading = createReducer(false, {\r\n//   // [addContact.pending]: () => true,\r\n//   // [addContact.fulfilled]: () => false,\r\n//   // [addContact.rejected]: () => false,\r\n//   // [deleteContact.pending]: () => true,\r\n//   // [deleteContact.fulfilled]: () => false,\r\n//   // [deleteContact.rejected]: () => false,\r\n//   // [fetchContacts.pending]: () => true,\r\n//   // [fetchContacts.fulfilled]: () => false,\r\n//   // [fetchContacts.rejected]: () => false,\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// const error = createReducer(null, {\r\n//   // [addContact.rejected]: (_, { payload }) => payload,\r\n//   // [deleteContact.rejected]: (_, { payload }) => payload,\r\n//   // [fetchContacts.rejected]: (_, { payload }) => payload,\r\n//   // [addContact.pending]: () => null,\r\n//   // [addContact.fulfilled]: () => null,\r\n//   // [deleteContact.pending]: () => null,\r\n//   // [deleteContact.fulfilled]: () => null,\r\n//   // [fetchContacts.pending]: () => null,\r\n//   // [fetchContacts.fulfilled]: () => null,\r\n// });\r\n\r\n// export default combineReducers({ items, filter, loading, error });\r\n\r\nexport const contactsActions = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n","import { generate } from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors } from 'redux/contacts';\r\nimport { contactsActions } from 'redux/contacts/contacts-reducer';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n  const filterInputId = generate();\r\n\r\n  const changeHandler = ({ target: { value: filterValue } }) =>\r\n    dispatch(contactsActions.changeFilter(filterValue));\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={filterInputId}>Find contacts by name</label>\r\n      <input value={value} onChange={changeHandler} id={filterInputId} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport { useDeleteContactMutation } from 'redux/contacts/contacts-slice';\r\nimport classes from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({\r\n  name,\r\n  number,\r\n  id,\r\n  // onDeleteContact\r\n}) => {\r\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n\r\n  return (\r\n    <li className={classes.contact}>\r\n      <p>\r\n        <span>{name}</span>: <span>{number}</span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => deleteContact(id)}\r\n          disabled={isDeleting}\r\n        >\r\n          {isDeleting ? 'Deleting...' : 'Delete'}\r\n        </button>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  // onDeleteContact: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","// import { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport ContactItem from './ContactItem';\r\nimport { useFetchContactsQuery } from 'redux/contacts/contacts-slice';\r\n\r\nconst ContactList = () => {\r\n  // const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  // const dispatch = useDispatch();\r\n  // const isLoadingContacts = useSelector(contactsSelectors.getIsLoadingContacts);\r\n\r\n  // const error = useSelector(contactsSelectors.getError);\r\n\r\n  const {\r\n    data: contacts,\r\n    isLoading: isLoadingForTheFirstTime,\r\n    error,\r\n  } = useFetchContactsQuery();\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(contactsOperations.fetchContacts());\r\n  // }, [dispatch]);\r\n\r\n  // const deleteContactHandler = (id) =>\r\n  //   dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoadingForTheFirstTime && <h2>Loading...</h2>}\r\n      {error && !isLoadingForTheFirstTime && <h2>{error}</h2>}\r\n      {contacts && (\r\n        <ul>\r\n          {contacts.map(({ id, name, number }) => (\r\n            <ContactItem\r\n              key={id}\r\n              name={name}\r\n              number={number}\r\n              id={id}\r\n              // onDeleteContact={() => deleteContact(id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import Form from 'components/Form';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n// import Counter from 'components/Counter';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>Phonebook</h1>\r\n    <Form />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n\r\n    <ContactList />\r\n\r\n    {/* <Counter /> */}\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const increment = createAction('counter/Increment');\r\nexport const decrement = createAction('counter/Decrement');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { increment, decrement } from './counter-actions';\r\n\r\nconst valueReducer = createReducer(0, {\r\n  [increment]: (prevState, { payload }) => prevState + payload,\r\n  [decrement]: (prevState, { payload }) => prevState - payload,\r\n});\r\n\r\nconst stepReducer = createReducer(15, {});\r\n\r\nconst counterReducer = combineReducers({\r\n  value: valueReducer,\r\n  step: stepReducer,\r\n});\r\n\r\nexport default counterReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport counterReducer from './counter/counter-reducer';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { contactsApi } from 'redux/contacts/contacts-slice';\r\n\r\nlet middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  contactsApi.middleware,\r\n];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middleware = [...middleware, require('redux-logger').createLogger()];\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    contacts: contactsReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const persistedStore = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.css';\r\nimport App from './App';\r\n// import ContactsContext from 'context/ContactsProvider';\r\n// import FilterContext from 'context/FilterProvider';\r\nimport store from 'redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ContactsContext>\r\n      <FilterContext> */}\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={<p>Loading...</p>} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n    {/* </FilterContext>\r\n    </ContactsContext> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}
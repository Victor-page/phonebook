{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactItem/ContactItem.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-actions.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/counter/counter-actions.js","redux/counter/counter-reducer.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","contactsEndpoint","fetchContacts","createAsyncThunk","a","get","data","addContact","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","name","includes","getIsLoadingContacts","loading","getError","error","changeFilter","createAction","Form","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","nameInputId","generate","numberInputId","handleChange","currentTarget","value","onSubmit","event","preventDefault","trim","alert","enteredName","enteredNumber","concurrence","find","addAction","contactsOperations","className","classes","form","htmlFor","type","pattern","title","required","onChange","Filter","filterInputId","filterValue","target","contactsActions","ContactItem","onDeleteContact","onClick","ContactList","isLoadingContacts","useEffect","map","deleteContactHandler","App","increment","decrement","valueReducer","createReducer","prevState","payload","stepReducer","counterReducer","combineReducers","step","fulfilled","_","pending","rejected","action","message","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","counter","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47c73598.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1WhxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactItem_contact__A0GNP\"};","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import {\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n//   deleteContactRequest,\r\n//   deleteContactSuccess,\r\n//   deleteContactError,\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n// } from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://61b44d0559c6ac0017300fbe.mockapi.io';\r\nconst contactsEndpoint = '/contacts';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async () => {\r\n    const { data } = await axios.get(contactsEndpoint);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get(contactsEndpoint)\r\n//     .then(({ data }) => {\r\n//       dispatch(fetchContactsSuccess(data));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(fetchContactsError(message));\r\n//     });\r\n// };\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (contact) => {\r\n    const { data } = await axios.post(contactsEndpoint, contact);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const addContact = (name, number) => (dispatch) => {\r\n//   const contact = { name, number };\r\n\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post(contactsEndpoint, contact)\r\n//     .then(({ data }) => {\r\n//       dispatch(addContactSuccess(data));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(addContactError(message));\r\n//     });\r\n// };\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id) => {\r\n    const { data } = await axios.delete(`${contactsEndpoint}/${id}`);\r\n    return data;\r\n  }\r\n);\r\n\r\n// export const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n//   axios\r\n//     .delete(`${contactsEndpoint}/${id}`)\r\n//     .then(({ data }) => {\r\n//       dispatch(deleteContactSuccess(data.id));\r\n//     })\r\n//     .catch(({ message }) => {\r\n//       dispatch(deleteContactError(message));\r\n//     });\r\n// };\r\n","export const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nexport const getIsLoadingContacts = (state) => state.contacts.loading;\r\n\r\nexport const getError = (state) => state.contacts.error;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// export const fetchContactsRequest = createAction(\r\n//   'contacts/fetchContactsRequest'\r\n// );\r\n// export const fetchContactsSuccess = createAction(\r\n//   'contacts/fetchContactsSuccess'\r\n// );\r\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n// export const addContactRequest = createAction('contacts/addContactRequest');\r\n// export const addContactSuccess = createAction('contacts/addContactSuccess');\r\n// export const addContactError = createAction('contacts/addContactError');\r\n\r\n// export const deleteContactRequest = createAction(\r\n//   'contacts/deleteContactRequest'\r\n// );\r\n// export const deleteContactSuccess = createAction(\r\n//   'contacts/deleteContactSuccess'\r\n// );\r\n// export const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport { generate } from 'shortid';\r\nimport classes from './Form.module.css';\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = generate();\r\n  const numberInputId = generate();\r\n\r\n  const handleChange = ({ currentTarget: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const findConcurrence = (enteredName, enteredNumber) =>\r\n    contacts.find(\r\n      ({ name, number }) => name === enteredName || number === enteredNumber\r\n    );\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (name.trim() === '' || number.trim() === '') {\r\n      return alert('The fields are mandatory.');\r\n    }\r\n\r\n    const concurrence = findConcurrence(name, number);\r\n    if (concurrence) {\r\n      return alert(concurrence.name + ' is already in contacts.');\r\n    }\r\n\r\n    const addAction = contactsOperations.addContact({ name, number });\r\n    dispatch(addAction);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.form}>\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label htmlFor={numberInputId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={numberInputId}\r\n      />\r\n      <button type=\"submit\">Add Contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { generate } from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors, contactsActions } from 'redux/contacts';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n  const filterInputId = generate();\r\n\r\n  const changeHandler = ({ target: { value: filterValue } }) =>\r\n    dispatch(contactsActions.changeFilter(filterValue));\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={filterInputId}>Find contacts by name</label>\r\n      <input value={value} onChange={changeHandler} id={filterInputId} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport classes from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, onDeleteContact }) => (\r\n  <li className={classes.contact}>\r\n    <p>\r\n      <span>{name}</span>: <span>{number}</span>\r\n      <button type=\"button\" onClick={onDeleteContact}>\r\n        Delete\r\n      </button>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport ContactItem from './ContactItem';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const isLoadingContacts = useSelector(contactsSelectors.getIsLoadingContacts);\r\n\r\n  const error = useSelector(contactsSelectors.getError);\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const deleteContactHandler = (id) =>\r\n    dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoadingContacts && <h2>Loading...</h2>}\r\n      {error && !isLoadingContacts && <h2>{error}</h2>}\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={() => deleteContactHandler(id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import Form from 'components/Form';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n// import Counter from 'components/Counter';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>Phonebook</h1>\r\n    <Form />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n\r\n    <ContactList />\r\n\r\n    {/* <Counter /> */}\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const increment = createAction('counter/Increment');\r\nexport const decrement = createAction('counter/Decrement');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { increment, decrement } from './counter-actions';\r\n\r\nconst valueReducer = createReducer(0, {\r\n  [increment]: (prevState, { payload }) => prevState + payload,\r\n  [decrement]: (prevState, { payload }) => prevState - payload,\r\n});\r\n\r\nconst stepReducer = createReducer(15, {});\r\n\r\nconst counterReducer = combineReducers({\r\n  value: valueReducer,\r\n  step: stepReducer,\r\n});\r\n\r\nexport default counterReducer;\r\n","import {\r\n  createReducer,\r\n  combineReducers,\r\n  // createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  changeFilter,\r\n  // addContactRequest,\r\n  // addContactSuccess,\r\n  // addContactError,\r\n  // deleteContactRequest,\r\n  // deleteContactSuccess,\r\n  // deleteContactError,\r\n  // fetchContactsRequest,\r\n  // fetchContactsSuccess,\r\n  // fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from './contacts-operations';\r\n\r\n// const contactsSlice = createSlice({\r\n//   name: 'contacts',\r\n//   initialState: { items: [], loading: false, filter: '', error: null },\r\n//   reducers: {\r\n//     changeFilter(state, { payload }) {\r\n//       state.filter = payload;\r\n//     },\r\n//   },\r\n//   extraReducers: {\r\n//     [fetchContacts.fulfilled]: (state, { payload }) => ({\r\n//       ...state,\r\n//       items: payload,\r\n//       loading: false,\r\n//       error: null,\r\n//     }),\r\n//     [fetchContacts.pending]: (state) => ({\r\n//       ...state,\r\n//       loading: true,\r\n//       error: null,\r\n//     }),\r\n//     [fetchContacts.rejected]: (state, action) => ({\r\n//       ...state,\r\n//       loading: false,\r\n//       error: action.error.message,\r\n//     }),\r\n\r\n//     [addContact.fulfilled]: (state, { payload }) => ({\r\n//       ...state,\r\n//       items: [payload, ...state.items],\r\n//       loading: false,\r\n//       error: null,\r\n//     }),\r\n//     [addContact.pending]: (state) => ({\r\n//       ...state,\r\n//       loading: true,\r\n//       error: null,\r\n//     }),\r\n//     [addContact.rejected]: (state, action) => ({\r\n//       ...state,\r\n//       loading: false,\r\n//       error: action.error.message,\r\n//     }),\r\n\r\n//     [deleteContact.fulfilled]: (state, { payload }) => ({\r\n//       ...state,\r\n//       items: state.items.filter(({ id }) => id !== payload.id),\r\n//       loading: false,\r\n//       error: null,\r\n//     }),\r\n//     [deleteContact.pending]: (state) => ({\r\n//       ...state,\r\n//       loading: true,\r\n//       error: null,\r\n//     }),\r\n//     [deleteContact.rejected]: (state, action) => ({\r\n//       ...state,\r\n//       loading: false,\r\n//       error: action.error.message,\r\n//     }),\r\n//   },\r\n// });\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: (prevState, { payload }) => [payload, ...prevState],\r\n  [deleteContact.fulfilled]: (prevState, { payload }) =>\r\n    prevState.filter(({ id }) => id !== payload.id),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [addContact.rejected]: (_, action) => action.error.message,\r\n  [deleteContact.rejected]: (_, { action }) => action.error.message,\r\n  [fetchContacts.rejected]: (_, action) => action.error.message,\r\n  [addContact.pending]: () => null,\r\n  [addContact.fulfilled]: () => null,\r\n  [deleteContact.pending]: () => null,\r\n  [deleteContact.fulfilled]: () => null,\r\n  [fetchContacts.pending]: () => null,\r\n  [fetchContacts.fulfilled]: () => null,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading, error });\r\n\r\n// export const contactsActions = contactsSlice.actions;\r\n\r\n// export default contactsSlice.reducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport counterReducer from './counter/counter-reducer';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nlet middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middleware = [...middleware, require('redux-logger').createLogger()];\r\n}\r\n\r\nconst rootReducer = {\r\n  counter: counterReducer,\r\n  contacts: contactsReducer,\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const persistedStore = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.css';\r\nimport App from './App';\r\n// import ContactsContext from 'context/ContactsProvider';\r\n// import FilterContext from 'context/FilterProvider';\r\nimport store from 'redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ContactsContext>\r\n      <FilterContext> */}\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={<p>Loading...</p>} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n    {/* </FilterContext>\r\n    </ContactsContext> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}